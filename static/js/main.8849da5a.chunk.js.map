{"version":3,"sources":["component/TodoTemplate.js","page/Todolist.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplate","useState","todos","input","state","setState","onSubmitEnter","e","key","Swal","fire","icon","title","showConfirmButton","timer","background","concat","todosList","map","obj","className","onClick","index","filter","item","i","inputs","useRef","ref","type","value","onChange","target","onKeyPress","swalWithBootstrapButtons","mixin","customClass","confirmButton","cancelButton","buttonsStyling","text","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","then","result","isConfirmed","dismiss","DismissReason","cancel","Todolist","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8849da5a.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport \"./TodoTemplate.scss\";\r\nimport Swal from \"sweetalert2\";\r\nimport { AiFillDelete } from \"react-icons/ai\";\r\n\r\nfunction TodoTemplate() {\r\n    const [state, setState] = useState({\r\n        todos: [\"투두리스트를 작성해보세요\"],\r\n        input: \"\",\r\n    });\r\n    const onChange = (e) => {\r\n        setState({\r\n            ...state,\r\n            input: e.target.value,\r\n        });\r\n    };\r\n    const onSubmit = () => {\r\n        if (input === \"\") {\r\n            Swal.fire({\r\n                icon: \"error\",\r\n                title: \"공백은 제출할 수 없습니다\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                background: \"#282a36\",\r\n            });\r\n        } else if (input === \"뭐하냐?\") {\r\n            Swal.fire({\r\n                icon: \"question\",\r\n                title: \"진짜 뭐하냐?\",\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                background: \"#282a36\",\r\n            });\r\n            setState({\r\n                todos: todos.concat(input),\r\n                input: \"\",\r\n            });\r\n        } else {\r\n            setState({\r\n                todos: todos.concat(input),\r\n                input: \"\",\r\n            });\r\n        }\r\n    };\r\n    const onSubmitEnter = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            if (input === \"\") {\r\n                Swal.fire({\r\n                    icon: \"error\",\r\n                    title: \"공백은 제출할 수 없습니다\",\r\n                    showConfirmButton: false,\r\n                    timer: 1000,\r\n                    background: \"#282a36\",\r\n                });\r\n            } else if (input === \"뭐하냐?\") {\r\n                Swal.fire({\r\n                    icon: \"question\",\r\n                    title: \"진짜 뭐하냐?\",\r\n                    showConfirmButton: false,\r\n                    timer: 1500,\r\n                    background: \"#282a36\",\r\n                });\r\n                setState({\r\n                    todos: todos.concat(input),\r\n                    input: \"\",\r\n                });\r\n            } else {\r\n                setState({\r\n                    todos: todos.concat(input),\r\n                    input: \"\",\r\n                });\r\n            }\r\n        }\r\n    };\r\n    const onDelete = (index) => {\r\n        setState({\r\n            input: \"\",\r\n            todos: todos.filter((item, i) => index !== i),\r\n        });\r\n    };\r\n    const onDeleteAll = () => {\r\n        const swalWithBootstrapButtons = Swal.mixin({\r\n            customClass: {\r\n                confirmButton: \"btn btn-success\",\r\n                cancelButton: \"btn btn-danger\",\r\n            },\r\n            buttonsStyling: true,\r\n        });\r\n\r\n        swalWithBootstrapButtons\r\n            .fire({\r\n                title: \"확실합니까?\",\r\n                text: \"모든 데이터들이 삭제됩니다!\",\r\n                icon: \"warning\",\r\n                showCancelButton: true,\r\n                confirmButtonText: \"삭제할래요!\",\r\n                cancelButtonText: \"다시 생각해볼래요!\",\r\n\r\n                reverseButtons: true,\r\n            })\r\n            .then((result) => {\r\n                //삭제한다고 했을때\r\n                if (result.isConfirmed) {\r\n                    setState({\r\n                        input: \"\",\r\n                        todos: [], //배열을 비움\r\n                    });\r\n                    swalWithBootstrapButtons.fire(\r\n                        \"삭제했습니다!\",\r\n                        \"모든 데이터들이 정상적으로 삭제되었습니다\",\r\n                        \"success\"\r\n                    );\r\n                } else if (\r\n                    /* Read more about handling dismissals below */\r\n                    result.dismiss === Swal.DismissReason.cancel\r\n                ) {\r\n                    swalWithBootstrapButtons.fire(\r\n                        \"취소되었습니다\",\r\n                        \"데이터들은 소중하니까요 ^^\",\r\n                        \"error\"\r\n                    );\r\n                }\r\n            });\r\n    };\r\n    const { todos, input } = state;\r\n    const todosList = todos.map((obj, key) => (\r\n        <li className=\"todo\" key={key}>\r\n            {obj}\r\n            <AiFillDelete\r\n                className=\"delete\"\r\n                onClick={() => {\r\n                    onDelete(key);\r\n                }}\r\n            ></AiFillDelete>\r\n        </li>\r\n    ));\r\n    const inputs = useRef(null);\r\n\r\n    return (\r\n        <div className=\"TodoTemplate\">\r\n            <div className=\"TodoTemplate_header\">\r\n                <div className=\"TodoTemplate_header_mainTitle\">뭐하냐?</div>\r\n                <div className=\"TodoTemplate_header_subTitle\">\r\n                    일정관리 잘 하라구~\r\n                </div>\r\n            </div>\r\n            <div className=\"TodoTemplate_body\">{todosList}</div>\r\n            <div className=\"TodoTemplate_footer\">\r\n                <div className=\"TodoTemplate_footer_input\" ref={inputs}>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={input}\r\n                        className=\"todo_input\"\r\n                        onChange={onChange}\r\n                        onKeyPress={onSubmitEnter}\r\n                    />\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"제출\"\r\n                        className=\"todo_submit\"\r\n                        onClick={onSubmit}\r\n                        onKeyPress={onSubmitEnter}\r\n                    />\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"모두삭제\"\r\n                        className=\"todo_delete-all\"\r\n                        onClick={onDeleteAll}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoTemplate;\r\n","import React from \"react\";\r\nimport TodoTemplate from \"../component/TodoTemplate\";\r\nfunction Todolist() {\r\n    return (\r\n        <>\r\n            <TodoTemplate></TodoTemplate>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Todolist;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport TodoTemplate from \"./component/TodoTemplate\";\nimport Todolist from \"./page/Todolist\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Todolist></Todolist>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}